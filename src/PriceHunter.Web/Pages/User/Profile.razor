@page "/User/Profile"

@using PriceHunter.Web.Data.Login
@using PriceHunter.Web.Data.User.App
@using PriceHunter.Web.Data.User.Api
@inject IToastService _toastService
@inject IHttpRequester _httpRequester

@attribute [Authorize]

<h3>Profile</h3>

@if (model == null || string.IsNullOrWhiteSpace(model.FirstName))
{
    <Loading />
}
else
{
    <EditForm Model="model" OnValidSubmit="@HandleSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText id="firstname" @bind-Value="model.FirstName" class="form-control" style="width:50%;"></InputText>
            <br />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText id="lastname" @bind-Value="model.LastName" class="form-control" style="width:50%;"></InputText>
            <br />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="model.Email" class="form-control" style="width:50%;"></InputText>
            <br />
        </div>
        <div class="form-group">
            <label for="type">Type</label>
            <InputText id="type" @bind-Value="model.Type" class="form-control" style="width:50%;" disabled="true"></InputText>
            <br />
        </div>
        <div class="form-group">
            <label for="type">Image</label>
            @if (!string.IsNullOrWhiteSpace(model.Image))
            {
                <br />
                <img src="@("http://localhost:5010" + model.Image)" width="100" alt="Profile Image" />
                <br />
            }
            <br />
            <InputFile OnChange="@((InputFileChangeEventArgs args) => OnInputFileChange(args))" style="width:50%;" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}


@code {
    UserViewModel model = new UserViewModel();

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private string UserId { get; set; }
    private string RequestUrl { get; set; }
    private string ImageRequestUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserId = (await authState).User.Claims.FirstOrDefault(p => p.Type == ClaimConstants.Id)?.Value;
            RequestUrl = string.Format(ApiUrls.V1UserUrl, UserId);
            ImageRequestUrl = string.Format(ApiUrls.V1UserUploadProfileImageUrl, UserId);

            var result = await _httpRequester.GetAsync<UserViewApiModel>(RequestUrl, true);
            if (result.IsSuccess)
            {
                model.FirstName = result.Response.Data.FirstName;
                model.LastName = result.Response.Data.LastName;
                model.Email = result.Response.Data.Email;
                model.Type = result.Response.Data.Type;
                model.Image = result.Response.Data.Image;
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
        }
    }

    private async void HandleSave()
    {
        try
        {
            var requestModel = new UserUpdateApiModel()
                {
                    FirstName = model.FirstName,
                    LastName = model.LastName,
                    Email = model.Email,
                    Type = model.Type
                };

            var result = await _httpRequester.PutAsync<UserUpdateApiModel, dynamic>(RequestUrl, requestModel, true);
            if (result.IsSuccess)
            {
                _toastService.ShowSuccess(result.Response.Message);
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.File == null)
            {
                return;
            }

            Stream stream = e.File.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();

            UserProfileImageUpdateApiModel fileUploadRequest = new UserProfileImageUpdateApiModel();
            fileUploadRequest.FileName = e.File.Name;
            fileUploadRequest.FileData = ms.ToArray();
            ms.Close();

            var result = await _httpRequester.PutAsync<UserProfileImageUpdateApiModel, UserProfileImageViewApiModel>(ImageRequestUrl, fileUploadRequest, true);
            if (result.IsSuccess)
            {
                model.Image = result.Response.Data.Image;
                _toastService.ShowSuccess(result.Response.Message);
            }

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
        }
    }
}
