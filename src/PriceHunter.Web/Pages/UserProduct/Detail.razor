@page "/UserProduct/Detail/{id:guid}"

@using PriceHunter.Web.Data.UserProduct.Api
@using PriceHunter.Web.Data.UserProduct.App
@using PriceHunter.Web.Data.Supplier.App

@inject IHttpRequester _httpRequester
@inject IToastService _toastService

<h3>Product Detail</h3>
@attribute [Authorize]

@if (_pageState == PageState.Loading)
{
    <Loading />
}
else if (_pageState == PageState.NoData)
{
    <text>
        No Data...
    </text>
}
else if (_pageState == PageState.Error)
{
    <text>
        Loading Error...
    </text>
}
else
{ 
    <div class="mb-3 w-50">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" disabled value="@model.Name">
    </div>

    <br />

    <h4>URL(s)</h4>
    if (model.UrlSupplierMapping.Any())
    {        
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col" class="w-25">Supplier</th>
                    <th scope="col" class="w-75">Url</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entity in model.UrlSupplierMapping)
                {
                    <tr>
                        <td>@entity.Supplier</td>
                        <td>
                            <a href="@entity.Url" target="_blank">@entity.Url</a>                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }else
    {
        <text>
            Not defined.
        </text>
    }
     
    <br />
    <br />

    <h4>Price History</h4>
    if (priceChanges.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col" class="w-25">Month</th>
                    <th scope="col" class="w-25">Year</th>
                    <th scope="col" class="w-50">Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entity in priceChanges)
                {
                    <tr>
                        <td>@entity.Month</td>
                        <td>@entity.Year</td>
                        <td>@entity.Price</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <text>
            Processing.
        </text>
    }
}

@code {
    [Parameter]
    public Guid id { get; set; }
    private PageState _pageState { get; set; } = PageState.Loading;
    private UserProductViewModel model = new UserProductViewModel();
    List<ProductPriceChangesViewModel> priceChanges = new List<ProductPriceChangesViewModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var requestUrl = string.Format(ApiUrls.V1UserProductUrl, id);
            var result = await _httpRequester.GetAsync<UserProductViewApiModel>(requestUrl, true);
            var supplierResult = await _httpRequester.GetAsync<List<SupplierViewModel>>(ApiUrls.V1SupplierAllUrl, true);
            var last6monthChangesRequestUrl = string.Format(ApiUrls.V1UserProductLast6MonthChangesUrl, id);
            var last6MonthChangesResult = await _httpRequester.GetAsync<List<ProductPriceChangesViewModel>>(last6monthChangesRequestUrl, true);

            if (result.IsSuccess && supplierResult.IsSuccess && last6MonthChangesResult.IsSuccess)
            {
                model.Name = result.Response.Data.Name;
                model.UrlSupplierMapping = result.Response.Data.UrlSupplierMapping?.Select(p => new UrlSupplierMappingViewModel
                    {
                        Supplier = supplierResult.Response.Data.FirstOrDefault(k => k.Id == p.SupplierId).Name,
                        Url = p.Url
                    }).ToList();

                if (model.UrlSupplierMapping == null)
                {
                    model.UrlSupplierMapping = new List<UrlSupplierMappingViewModel>();
                }

                priceChanges = last6MonthChangesResult.Response.Data;

                _pageState = PageState.DataLoaded;
            }
            else
            {
                _pageState = PageState.Error;
            }
        }
        catch (Exception ex)
        {
            _pageState = PageState.Error;
            _toastService.ShowError(ex.Message);
        }
    }
}
