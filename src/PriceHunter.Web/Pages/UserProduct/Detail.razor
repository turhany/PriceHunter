@page "/User/Products/Detail/{id:guid}"

@using PriceHunter.Web.Data.Currency.App
@using PriceHunter.Web.Data.UserProduct.Api
@using PriceHunter.Web.Data.UserProduct.App
@using PriceHunter.Web.Data.Supplier.App
@using System.Globalization

@inject IHttpRequester _httpRequester
@inject IToastService _toastService

<h3>Product Detail</h3>
@attribute [Authorize]

@if (_pageState == PageState.Loading)
{
    <Loading />
}
else if (_pageState == PageState.NoData)
{
    <text>
        No Data...
    </text>
}
else if (_pageState == PageState.Error)
{
    <text>
        Loading Error...
    </text>
}
else
{
    <div class="mb-3 w-50">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" disabled value="@model.Name">
    </div>
    <div class="mb-3 w-50">
        <label for="currency" class="form-label">Currency</label>
        <input type="text" class="form-control" id="currency" disabled value="@model.Currency (@model.CurrencyShortCode)">
    </div>
    <div class="mb-3 w-50">
        <label for="isfavorite" class="form-label">Is Favorite</label>
        @if (model.IsFavorite)
        {
            <input type="checkbox" id="isfavorite" disabled checked class="form-check">
        }
        else
        {
            <input type="checkbox" id="isfavorite" disabled class="form-check">
        }
    </div>

    <br />

    <h4>URL(s)</h4>
    if (model.UrlSupplierMapping.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col" class="w-25">Supplier</th>
                    <th scope="col" class="w-75">Url</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entity in model.UrlSupplierMapping)
                {
                    <tr>
                        <td>@entity.Supplier</td>
                        <td>
                            <a href="@entity.Url" target="_blank">@entity.Url</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <text>
            Not defined.
        </text>
    }

    <br />
    <br />

    <h4>Price History</h4>
    if (priceChanges.Any())
    {
        <RadzenChart>
            <RadzenLineSeries Smooth="false" Data="@priceChanges" CategoryProperty="Month" LineType="LineType.Dashed" ValueProperty="Price" Title="Price">
                <ChildContent>
                    <RadzenMarkers MarkerType="MarkerType.Square" />
                    <RadzenSeriesDataLabels Visible="true" />
                </ChildContent>
                <TooltipTemplate Context="data">                    
                    <div>
                        @FormatPrice(data.Price)
                        <br>
                        @data.Supplier
                    </div>
                </TooltipTemplate>
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth">
                <RadzenAxisTitle Text="Months" />
            </RadzenCategoryAxis>
            <RadzenValueAxis Formatter="@FormatPrice">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Price Changes(Min)" />
            </RadzenValueAxis>
        </RadzenChart>
    }
    else
    {
        <text>
            Processing.
        </text>
    }

    <div>
        <br />
        <a href="@NavigationConstants.UserProductList" class="btn btn-primary">Back</a>
        <br />
        <br />
    </div>
}

@code {
    [Parameter]
    public Guid id { get; set; }
    private PageState _pageState { get; set; } = PageState.Loading;
    private UserProductViewModel model = new UserProductViewModel();
    List<ProductPriceChangesViewModel> priceChanges = new List<ProductPriceChangesViewModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var requestUrl = string.Format(ApiUrls.V1UserProductUrl, id);
            var result = await _httpRequester.GetAsync<UserProductViewApiModel>(requestUrl, true);
            var supplierResult = await _httpRequester.GetAsync<List<SupplierViewModel>>(ApiUrls.V1SupplierAllUrl, true);
            var currencyResult = await _httpRequester.GetAsync<List<CurrencyViewModel>>(ApiUrls.V1CurrencyAllUrl, true);
            var last6monthChangesRequestUrl = string.Format(ApiUrls.V1UserProductLast6MonthChangesUrl, id);
            var last6MonthChangesResult = await _httpRequester.GetAsync<List<ProductPriceChangesViewModel>>(last6monthChangesRequestUrl, true);

            if (result.IsSuccess && supplierResult.IsSuccess && last6MonthChangesResult.IsSuccess && currencyResult.IsSuccess)
            {
                var currency = currencyResult.Response.Data.FirstOrDefault(p => p.Id == result.Response.Data.CurrencyId);

                model.Name = result.Response.Data.Name;
                model.CurrencyId = result.Response.Data.CurrencyId;
                model.Currency = currency.Name;
                model.CurrencyShortCode = currency.ShortCode;
                model.IsFavorite = result.Response.Data.IsFavorite;
                model.UrlSupplierMapping = result.Response.Data.UrlSupplierMapping?.Select(p => new UrlSupplierMappingViewModel
                    {
                        SupplierId = p.SupplierId,
                        Supplier = supplierResult.Response.Data.FirstOrDefault(k => k.Id == p.SupplierId).Name,
                        Url = p.Url
                    }).ToList();

                if (model.UrlSupplierMapping == null)
                {
                    model.UrlSupplierMapping = new List<UrlSupplierMappingViewModel>();
                }

                var priceData = last6MonthChangesResult.Response.Data;
                foreach (var item in priceData)
                {
                    item.Supplier = supplierResult.Response.Data.FirstOrDefault(k => k.Id == item.SupplierId)?.Name;
                }

                priceChanges = priceData;

                _pageState = PageState.DataLoaded;
            }
            else
            {
                _pageState = PageState.Error;
            }
        }
        catch (Exception ex)
        {
            _pageState = PageState.Error;
            _toastService.ShowError(ex.Message);
        }
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            if (int.TryParse(value.ToString(), out int month))
            {
                return CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
            }
        }

        return string.Empty;
    }

    string FormatPrice(object value)
    {
        return ((double)value).ToString("N2");
    }
}
