@page "/User/Products/Add"

@using PriceHunter.Web.Data.UserProduct.App
@using PriceHunter.Web.Data.UserProduct.Api
@using PriceHunter.Web.Data.Supplier.App

@inject IHttpRequester _httpRequester
@inject IToastService _toastService
@inject NavigationManager _navigationManager

<h3>New Product</h3>

@if (_pageState == PageState.Loading)
{
    <Loading />
}
else if (_pageState == PageState.NoData)
{
    <text>
        No Data...
    </text>
}
else if (_pageState == PageState.Error)
{
    <text>
        Loading Error...
    </text>
}
else
{
    <EditForm Model="model" OnValidSubmit="@HandleSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="model.Name" class="form-control w-50"></InputText>
            <br />
        </div>
        <div class="form-group">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col" class="w-25">Supplier</th>
                        <th scope="col" class="w-75">Url</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var entity in model.UrlSupplierMapping)
                    {
                        <tr>
                            <td>@entity.Supplier</td>
                            <td>
                                <InputText id="name" @bind-Value="entity.Url" class="form-control"></InputText>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <br />
        @if (_pageState == PageState.Loading)
        {
            <Loading />
        }
        else
        {
            <a href="@NavigationConstants.UserProductList" class="btn btn-primary">Back</a>
            <button type="submit" class="btn btn-primary">Save</button>
        }
    </EditForm>
}

@code {
    UserProductViewModel model = new UserProductViewModel();

    private PageState _pageState { get; set; } = PageState.Loading;

    protected override async Task OnInitializedAsync()
    {
        try
        {            
            var supplierResult = await _httpRequester.GetAsync<List<SupplierViewModel>>(ApiUrls.V1SupplierAllUrl, true);

            if (supplierResult.IsSuccess)
            {
                model.UrlSupplierMapping = supplierResult.Response.Data.Select(p => new UrlSupplierMappingViewModel
                    {
                        Supplier = p.Name,
                        SupplierId = p.Id
                    }).ToList();

                _pageState = PageState.Loaded;
            }
            else
            {
                _pageState = PageState.Error;
            }
        }
        catch (Exception ex)
        {
            _pageState = PageState.Error;
            _toastService.ShowError(ex.Message);
        }

    }

    private async void HandleSave()
    { 
        try
        {
            _pageState = PageState.Loading;

            var requestModel = new UserProductCreateApiModel();
            requestModel.Name = model.Name;
            if (model.UrlSupplierMapping != null &&
                model.UrlSupplierMapping.Any(p => !string.IsNullOrWhiteSpace(p.Url)))
            {
                requestModel.UrlSupplierMapping =
                model.UrlSupplierMapping
                .Where(p => !string.IsNullOrWhiteSpace(p.Url))
                .Select(p => new UrlSupplierMappingCreateModel
                    {
                        SupplierId = p.SupplierId,
                        Url = p.Url.Trim()
                    }).ToList();
            }

            var result = await _httpRequester.PostAsync<UserProductCreateApiModel, dynamic>(ApiUrls.V1UserProductCreateUrl, requestModel, true);
            if (result.IsSuccess)
            {
                _pageState = PageState.Loaded;
                _navigationManager.NavigateTo(NavigationConstants.UserProductList);
                _toastService.ShowSuccess(result.Response.Message);
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
        }
        finally
        {
            _pageState = PageState.Loaded;
            this.StateHasChanged();
        }
    }
}
