@page "/Login"

@using PriceHunter.Web.Data.Login
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService ToastService
@inject HttpClient Http

<h3>Login</h3>

<EditForm Model="model" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="model.Email" class="form-control" style="width:50%;"></InputText>
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="model.Password" type="password" class="form-control" style="width:50%;"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-primary" @on>Login</button>
</EditForm>

@code {
    GetTokenRequest model = new GetTokenRequest();

    private async void HandleLogin()
    {
        try
        {
            var result = await Http.PostAsJsonAsync(AppConstants.V1ApiTokenUrl, model);
            var response = await result.Content.ReadFromJsonAsync<DataResponse<GetTokenResponse>>();

            Console.WriteLine(model.Email);
            Console.WriteLine(model.Password);

            if (response.Status == ServiceStatusMessages.Success)
            {
                await LocalStorage.SetItemAsync<GetTokenResponse>(AppConstants.TokenStorageKey, response.Data);
                await AuthStateProvider.GetAuthenticationStateAsync();
                NavigationManager.NavigateTo(NavigationConstants.UserProfile);
            }
            else
            {
                var errorMessageBuilder = new StringBuilder();
                if (!string.IsNullOrEmpty(response.Message))
                {
                    errorMessageBuilder.AppendLine(response.Message);
                }
                if (response.ValidationMessages != null && response.ValidationMessages.Any())
                {
                    foreach (var error in response.ValidationMessages)
                    {
                        errorMessageBuilder.AppendLine(error);
                    }
                }
                
                ToastService.ShowError(errorMessageBuilder.ToString()); 
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message); 
        }
    }
}